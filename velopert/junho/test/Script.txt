React는 User Interface를 구축하기 위해 효율적인 javascript 라이브러리

컴포넌트라고 불리는 작고 고립된 코드의 파편을 이용해서 UI를 구성

props라는 매개변수를 받아오고 render 함수를 통해 표시할 뷰 계층 구조를 반환

render는 렌더링할 내용을 경량화한 React 엘리먼트를 반환

<div/> 구문은 빌드하는시점에 React.createElement('div')로 변환

const element = <h1>Hello, world!</h1>; ]-=> JSX라 하며 JavaScript를 확장한 문법

엘리먼트는 React 앱의 가장 작은 단위

React로 구현된 애플리케이션은 일반적으로 하나의 루트 DOM 노드가 있습니다. React를 기존 앱에 통합하려는 경우 원하는 만큼 많은 수의 독립된 루트 DOM 노드가 있을 수 있습니다.

React 엘리먼트를 루트 DOM 노드에 렌더링하려면 둘 다 ReactDOM.render()로 전달하면 됩니다.

React 엘리먼트는 불변객체이다. => 엘리먼트 자식이나 속성을 변경할 수 없다.

“props” (props는 속성을 나타내는 데이터입니다) 

Hook은 React 버전 16.8에 추가

# $ 템플릿 리터럴 ${NAME}

#  컴포넌트 간에는 무조건 props를 통해서만 데이터를 주고받고 props는 컴포넌트 내부에서 변경되지 않습니다. 

# 만약 state의 값을 직접 변경할 경우에는 해당 오브젝트의 reference 값이 변하지 않아 컴포넌트는 state가 변경되지 않았다고 볼 수밖에 없습니다. 
그러므로 화면이 갱신되지 않는 것이지요. 따라서 React는 setState를 이용해 기존 state와 머지하여 state의 변경 가능성을 명시적으로 알려줍니다. 
머지를 통해 새로 생성된 state의 reference 값은 기존과 다르므로 컴포넌트에서는 shallow compare를 통해 변경되었음을 알 수 있습니다. 
물론 reference 변경일 뿐이니 실제 값은 변경되지 않을 수도 있습니다.
한 가지 더 중요한 사실은 setState 호출 즉시 state가 변경되는 것이 아니라 비동기로 동작한다는 점입니다. 
상태가 변경된 직후에 필요한 작업이 있다면 setState(nextState, callback)의 callback을 사용해야 합니다.
따라서 아래는 보장되지 않습니다.
setState 호출 직후에 state가 즉시 갱신된다.
한 컨텍스트 내에서의 setState 호출 수와 컴포넌트 업데이트 수는 같다.
하지만 다음은 보장됩니다.
setState 실행 순서
setState callback의 실행 순서
state 변화가 클릭 등의 event 실행 전에 컴포넌트에 반영된다.
그렇다면 setState는 왜 비동기로 동작할까요? 이는 끊김 없는 원활한 
UI/UX를 제공하기 위해 일정 수의 render를 꼭 수행시키기 위해서입니다.
 setState가 동기로 동작한다고 가정해보겠습니다. 
 state 변경이 많으면 많을수록 render는 모든 변경이 적용될 때까지 늦어지기 때문에 실제 화면에서는 엄청나게 부자연스럽게 동작하게 될 것입니다. 비동기로 동작하게 되면 render 시점과 별개로 동작하기 때문에 자연스러운 갱신이 가능해집니다.

# JSX는 container element안에 잇어야 한다.
블록 유효 범위 let
{} 브라켓



// 이 함수에 파라미터를 넣어서 호출하게 되면 전달받은 파라미터로 값이 바뀌게 되고 컴포넌트는 
// 정상적으로 리렌더링 됩니다.

// userEffect
// useEffect 는 리액트 컴포넌트가 렌더링 될 때마다 특정 작업을 수행하도록 설정 할 수 있는 Hook

// 마운트 될 때만 실행하고 싶을 때
useEffect(() => {
  console.log('마운트 될 때만 실행됩니다.');
}, []);

// 특정 값이 업데이트 될 때만 실행하고 싶을 때

useEffect(() => {
  console.log(name);
}, [name]);


// 업데이트 되기 직전에 어떠한 작업을 수행하고 싶다면 useEffect 에서 뒷정리(cleanup) 함수를 반환
 useEffect(() => {
    console.log('effect');
    console.log(name);
    return () => {
      console.log('cleanup');
      console.log(name);
    };
  });

// useReducer
// useReducer 는 useState 보다 컴포넌트에서 더 다양한 상황에 따라 다양한 상태를 다른 값으로 업데이트해주고 싶을 때 사용하는 Hook
// 리듀서는 현재 상태와, 업데이트를 위해 필요한 정보를 담은 액션(action) 값을 전달 받아 새로운 상태를 반환하는 함수입니다. 리듀서 함수에서 새로운 상태를 만들 때는 꼭 불변성을 지켜주어야 합니다.
//function reducer(state, action) {
//  return { ... }; // 불변성을 지키면서 업데이트한 새로운 상태를 반환합니다
//}

const nextState = produce(state, draft => {
  const post = draft.posts.find(post => post.id === 1);
  post.comments.push({
    id: 3,
    text: '와 정말 쉽다!'
  });
});